import itertools
from twisted.python import log, util
from buildbot.status.builder import SUCCESS, WARNINGS
from buildbot.steps.shell import ShellCommand
from buildbot.process.properties import Property

try:
    import cStringIO
    StringIO = cStringIO
except ImportError:
    import StringIO
import re

class LintStep(ShellCommand):
    """
    A L{ShellCommand} that generates summary information of errors generated
    during a build, and new errors generated vs. the most recent trunk build.

    @ivar worse: a L{bool} indicating whether this build is worse with respect
        to reported errors than the most recent trunk build.
    """
    flunkOnWarnings = True

    def createSummary(self, logObj):
        logText = logObj.getText()
        self.worse = self.processLogs(self.getPreviousLog(), logText)


    def processLogs(self, oldText, newText):
        currentErrors = self.computeErrors(newText)
        previousErrors = self.computeErrors(oldText)

        self.addCompleteLog('%s errors' % self.lintChecker, '\n'.join(self.formatErrors(currentErrors)))
        self.formatErrors(previousErrors)

        newErrors = self.computeDifference(currentErrors, previousErrors)

        if newErrors:
            allNewErrors = self.formatErrors(newErrors)
            self.addCompleteLog('new %s errors' % self.lintChecker, '\n'.join(allNewErrors))

        return bool(newErrors)


    def computeErrors(self, logText):
        """
        @type logText: L{str}
        @param logText: output of lint command

        @return: L{dict} of L{set}s containing errors generated by lint, grouped by
            type
        """
        raise NotImplementedError("Must implement computeErrors for a Lint step")


    def formatErrors(self, newErrors):
        raise NotImplementedError("Must implement formatErrors for a Lint step")


    @staticmethod
    def computeDifference(current, previous):
        """
        Takes two dicts of sets, and computes the keywise difference.

        @type current: L{dict} of L{set}s
        @param current: errors from current build

        @type previous: L{dict} of L{set}s
        @param previous: errors from previous build

        @return
        @rtype L{dict}
        """
        new = {}
        for errorType in current:
            errors = (
                current[errorType] -
                previous.get(errorType, set()))
            log.msg("Found %d new errors of type %s" % (len(errors), errorType))
            if errors:
                new[errorType] = errors
        return new


    def getPreviousLog(self):
        """
        Gets the output of lint from the last build of trunk.

        @return: output of lint from last trunk build
        @rtype: L{str}
        """
        build = self._getLastBuild()
        if build is None:
            log.msg("Found no previous build, returning empty error log")
            return ""
        for logObj in build.getLogs():
            if logObj.step.name == self.name and logObj.name == 'stdio':
                text = logObj.getText()
                log.msg("Found error log, returning %d bytes" % (len(text),))
                return text
        log.msg("Did not find error log, returning empty error log")
        return ""


    def _getLastBuild(self):
        """
        Gets the L{BuildStatus} object of the most recent build of trunk.

        @return: most recent build of trunk
        @rtype: L{BuildStatus}
        """
        status = self.build.build_status
        number = status.getNumber()
        if number == 0:
            log.msg("last result is undefined because this is the first build")
            return None

        builder = status.getBuilder()
        targetRevision = self.getProperty('lint_revision')
        log.msg(format='Looking for build of %(revision)s', revision=targetRevision)

        count = 0
        lastTrunkBuild = None
        while count < 200 and number > 0:
            number -= 1
            build = builder.getBuild(number)
            if not build:
                continue
            branch = build.getProperty("branch")
            revision = build.getProperty('got_revision')
            if not branch:
                count += 1
                if revision == targetRevision:
                    log.msg(format="Found build %(number)d of trunk at %(revision)s",
                            number=number, revision=revision)
                    return build
                else:
                    log.msg(format="skipping build %(number)d of trunk at %(revision)s",
                            number=number, revision=revision)
                    try:
                        if revision and not lastTrunkBuild:
                            lastTrunkBuild = (revision, build)
                    except TypeError:
                        pass
            else:
                log.msg(format="skipping build %(number)d of branch %(branch)r at %(revision)s",
                        number=number, revision=revision, branch=branch)
        log.msg(format="falling off the end after searching %(count)d builds",
                count=status.getNumber() - number)
        if lastTrunkBuild:
            revision, build = lastTrunkBuild
            log.msg(format="Using build %(number)d at %(revision)s instead of %(targetRevision)s",
                        number=build.getNumber(), revision=revision, targetRevision=targetRevision)
            return build
        return None


    def evaluateCommand(self, cmd):
        if self.worse:
            return WARNINGS
        return ShellCommand.evaluateCommand(self, cmd)



class CheckDocumentation(LintStep):
    """
    Run Pydoctor over the source to check for errors in API
    documentation.
    """
    name = 'api-documentation'
    command = (
        'python',
        'bin/admin/build-apidocs',
        '.',
        'apidocs')
    description = ["checking", "api", "docs"]
    descriptionDone = ["api", "docs"]

    lintChecker = 'pydoctor'

    @staticmethod
    def computeErrors(logText):
        errors = {}
        for line in StringIO.StringIO(logText):
            try:
                # Mostly get rid of the trailing \n
                line = line.strip()
                if 'invalid ref to' in line:
                    key = 'invalid ref'
                    # Discard the line number since it's pretty unstable
                    # over time
                    fqpnlineno, rest = line.split(' ', 1)
                    fqpn, lineno = fqpnlineno.split(':')
                    value = '%s: %s' % (fqpn, rest)
                elif 'found unknown field on' in line:
                    key = 'unknown fields'
                    value = line
                else:
                    continue
                errors.setdefault(key, set()).add(value)
            except: # TODO: This should be handled better.
                log.err()
        return errors


    def formatErrors(self, newErrors):
        allNewErrors = []
        for errorType in newErrors:
            allNewErrors.extend(newErrors[errorType])
        allNewErrors.sort()
        return allNewErrors


    def getText(self, cmd, results):
        if results == WARNINGS:
            return ["api", "docs"]
        return ShellCommand.getText(self, cmd, results)


class TwistedCheckerError(util.FancyEqMixin, object):
    regex = re.compile(r"^(?P<type>[WCEFR]\d{4}):(?P<line>\s*\d+),(?P<indent>\d+):(?P<text>.*)")
    compareAttributes = ('type', 'text')

    def __init__(self, msg):
        self.msg = msg
        m = self.regex.match(msg)
        if m:
            d = m.groupdict()
            self.type = d['type']
            self.line = d['line']
            self.indent = d['indent']
            self.text = d['text']
        else:
            self.type = "UXXXX"
            self.line = "9999"
            self.indent = "9"
            self.text = "Unparseable"
            log.err(Exception, "unparseable")

    def __hash__(self):
        return hash((self.type, self.text))

    def __str__(self):
        return self.msg

    def __cmp__(self, other):
        return cmp(
                (self.line, self.indent, self.type, self.text),
                (other.line, other.indent, other.type, other.text),
                )

    def __repr__(self):
        return ("<TwistedCheckerError type=%s line=%d indent=%d, text=%r>" %
            (self.type, int(self.line), int(self.indent), self.text))


class CheckCodesByTwistedChecker(LintStep):
    """
    Run TwistedChecker over source codes to check for new warnings
    involved in the lastest build.
    """
    name = 'run-twistedchecker'
    command = ['twistedchecker', Property('test-case-name', default='twisted')]
    description = ["checking", "codes"]
    descriptionDone = ["check", "results"]
    prefixModuleName = "************* Module "
    regexLineStart = "^[WCEFR]\d{4}\:"

    lintChecker = 'twistedchecker'


    def evaluateCommand(self, cmd):
        """
        Called when command final status is required.
        """
        # twistedchecker will exit with non-zero on errors, but Twisted
        # code is not yet clean so there will always be errors.
        if self.worse:
            return WARNINGS
        if self.currentErrors:
            return SUCCESS
        else:
            # If no errors were reported then fallback to command status
            # code as the whole command might have fail to run.
            return ShellCommand.evaluateCommand(self, cmd)


    @classmethod
    def computeErrors(cls, logText):
        warnings = {}
        currentModule = None
        warningsCurrentModule = []
        for line in StringIO.StringIO(logText):
            # Mostly get rid of the trailing \n
            line = line.strip("\n")
            if line.startswith(cls.prefixModuleName):
                # Save results for previous module
                if currentModule:
                    warnings[currentModule] = set(map(TwistedCheckerError, warningsCurrentModule))
                # Initial results for current module
                moduleName = line.replace(cls.prefixModuleName, "")
                currentModule = moduleName
                warningsCurrentModule = []
            elif re.search(cls.regexLineStart, line):
                warningsCurrentModule.append(line)
            else:
                if warningsCurrentModule:
                    warningsCurrentModule[-1] += "\n" + line
                else:
                    log.msg("Bad result format for %s" % currentModule)
        # Save warnings for last module
        if currentModule:
            warnings[currentModule] = set(map(TwistedCheckerError, warningsCurrentModule))
        return warnings


    @classmethod
    def formatErrors(cls, newErrors):
        allNewErrors = []
        for modulename in sorted(newErrors.keys()):
            allNewErrors.append(cls.prefixModuleName + modulename)
            allNewErrors.extend(sorted(newErrors[modulename]))
        return map(str, allNewErrors)

    def processLogs(self, oldText, newText):
        self.currentErrors = self.computeErrors(newText)
        previousErrors = self.computeErrors(oldText)

        newErrors = self.computeDifference(self.currentErrors, previousErrors)

        if newErrors:
            allNewErrors = self.formatErrors(newErrors)
            self.addCompleteLog('new %s errors' % self.lintChecker, '\n'.join(allNewErrors))

        for toplevel, modules in itertools.groupby(sorted(self.currentErrors.keys()), lambda k: ".".join(k.split(".")[0:2])):
            modules = list(modules)
            self.addCompleteLog("%s %s errors" % (self.lintChecker, toplevel),
                    '\n'.join(self.formatErrors(dict([(module, self.currentErrors[module]) for module in modules]))))

        return bool(newErrors)


class PyFlakesError(util.FancyEqMixin, object):
    regex = re.compile(r"^(?P<file>[^:]*):(?P<line>\d+): (?P<text>.*)")
    compareAttributes = ('file', 'text')

    def __init__(self, msg, file, line, text):
        self.msg = msg
        self.file = file
        self.line = line
        self.text = text

    @classmethod
    def fromLine(cls, msg):
        m = cls.regex.match(msg)
        if m:
            d = m.groupdict()
            return cls(msg, d['file'], d['line'], d['text'])

    def __hash__(self):
        return hash((self.file, self.text))

    def __str__(self):
        return self.msg

    def __cmp__(self, other):
        return cmp(
                (self.file, self.line, self.text),
                (other.file, other.line, other.text),
                )

    def __repr__(self):
        return ("<PyFlakesError file=%s line=%d text=%r>" %
            (self.file, int(self.line), self.text))

class PyFlakes(LintStep):
    """
    Run TwistedChecker over source codes to check for new warnings
    involved in the lastest build.
    """
    name = 'pyflakes'
    command = ['pyflakes', Property('test-case-name', default='twisted')]
    description = ["running", "pyflakes"]
    descriptionDone = ['pyflakes']

    lintChecker = 'pyflakes'

    @classmethod
    def computeErrors(cls, logText):
        warnings = set() 
        for line in StringIO.StringIO(logText):
            # Mostly get rid of the trailing \n
            line = line.strip("\n")
            error = PyFlakesError.fromLine(line)
            if error:
                warnings.add(error)
        return {'pyflakes':warnings}


    @classmethod
    def formatErrors(cls, newErrors):
        return map(str, sorted(newErrors['pyflakes']))

    def evaluateCommand(self, cmd):
        if self.worse:
            return WARNINGS
        return SUCCESS
