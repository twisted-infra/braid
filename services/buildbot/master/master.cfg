#! /usr/bin/python

# This configuration file is described in $BUILDBOT/docs/config.xhtml

# This is used to run the Twisted Buildbot at
# <http://buildbot.twistedmatrix.com/>. Passwords and other secret
# information are loaded from a neighboring file called 'private.py'.

# Enable TCP keepalives by monkey patching Twisted.
# Twisted ticket: https://twistedmatrix.com/trac/ticket/8492
# The build master is terrible at noticing
# disconnected slaves.  Also it's terrible at letting me enable tcp
# keepalives.
from twisted.spread.pb import PBServerFactory
_parent = PBServerFactory.protocol
class KeepaliveBroker(_parent):
    def makeConnection(self, transport):
        transport.setTcpKeepAlive(True)
        return _parent.makeConnection(self, transport)
PBServerFactory.protocol = KeepaliveBroker

# We now return to your regularly scheduled program.
from os.path import expanduser, dirname
import sys
sys.path.insert(0, dirname(__file__))
del expanduser, dirname, sys

from buildbot.changes import filter
from buildbot.process.properties import Interpolate
from buildbot.schedulers.timed import Nightly
from buildbot.schedulers import forcesched
from buildbot.schedulers.basic import (
    AnyBranchScheduler,
    SingleBranchScheduler,
    )
from buildbot.status import words, mail
from buildbot.status.github import GitHubStatus
from buildbot.status.web.auth import BasicAuth
from buildbot.status.web.authz import Authz
from buildbot.locks import SlaveLock
from buildbot.buildslave import BuildSlave

import private # holds passwords
reload(private) # make it possible to change the contents without a restart

from twisted_factories import (
    TwistedDocumentationBuildFactory,
    TwistedVirtualenvReactorsBuildFactory,
    TwistedBdistFactory,
    TwistedToxDistPublishFactory,
    TwistedCoveragePyFactory,
    TwistedBenchmarksFactory,
    TwistedToxBuildFactory,
    TwistedToxCoverageBuildFactory,
    Win32RemovePYCs,
    BASE_DEPENDENCIES, CEXT_DEPENDENCIES,
    EXTRA_DEPENDENCIES, WINDOWS_DEPENDENCIES,
)

from txbuildbot.git import MergeForward, TwistedGit
from txbuildbot.web import TwistedGitHubEventHandler, TwistedWebStatus

BuildmasterConfig = c = {}

# Maximum number of builds to execute on a slave at a time.  Slaves
# not listed here have no limit.
slave_max_builds = {
    'bot-glyph-6': 1,
}

fedora24_slaves = ['fedora-fedora24-%d' % (i,) for i in range(1,3)]
fedora25_slaves = ['fedora-fedora25-%d' % (i,) for i in range(1,3)]
rhel7_slaves = ['fedora-rhel7-%d' % (i,) for i in range(1,3)]


allpy27_slaves = fedora24_slaves + fedora25_slaves


c['slaves'] = []
alwaysNotify = ['tom.prince@ualberta.net']
for bot in private.bot_info.keys():
    password, notifyOnMissing = private.bot_info[bot]
    if alwaysNotify not in notifyOnMissing:
        notifyOnMissing.extend(alwaysNotify)
    c['slaves'].append(BuildSlave(
            bot, password, slave_max_builds.get(bot, None),
            notifyOnMissing, 2400))

c['change_source'] = []

## configure the builders

gitURL = "https://github.com/twisted/twisted.git"

git_update = [
    TwistedGit(repourl=gitURL, branch="trunk", mode='full', method='fresh'),
    MergeForward(repourl=gitURL)
]

builders = []

oneCPULock = SlaveLock('cpu-1', maxCount=1)
twoCPULock = SlaveLock('cpu-2', maxCount=2)

builders.append({
    'slavenames': allpy27_slaves,
    'name': 'documentation',
    'builddir': 'documentation',
    'factory': TwistedDocumentationBuildFactory(git_update),
    'category': 'supported'})


#
# Windows 7
#
builders.append({
    'name': 'windows7-64-py2.7',
    'slavenames': ['bot-glyph-6'],
    'factory': TwistedToxBuildFactory(
        git_update,
        python='c:\\python27\\python.exe',
        platform='windows',
        toxEnv='py27-alldeps-nocov-windows',
        reactors=['select', 'iocp'],
    ),
    'category': 'supported',
})

builders.append({
    'name': 'windows7-64-py2.7-coverage',
    'slavenames': ['bot-glyph-6'],
    'factory': TwistedToxBuildFactory(
        git_update,
        python='c:\\python27\\python.exe',
        platform='windows',
        toxEnv='py27-alldeps-withcov-windows,codecov-publish',
        env={'CODECOV_TOKEN': private.codecov_twisted_token,
             'CI_BUILD_ID': 'windows64py27'},
    ),
    'category': 'supported',
})

builders.append({
    'name': 'windows7-64-py2.7-wheel',
    'slavenames': ['bot-glyph-6'],
    'factory': TwistedToxDistPublishFactory(
        git_update,
        python='c:\\python27\\python.exe',
        platform='windows',
        toxEnv='py27-wheel',
    ),
    'category': 'supported',
})



#
# Ubuntu 14.04
#
builders.append({
    'name': 'ubuntu14.04-py2.7',
    'slavenames': ['bot-glyph-1'],
    'builddir': 'ubuntu64-py2.6-poll',
    'factory': TwistedToxBuildFactory(
        git_update, toxEnv="py27-alldeps-nocov-posix",
        reactors=["select", "poll", "epoll"]),
    'category': 'supported'})


#
# Fedora 24
#
builders.append({
    'name': 'fedora24-py2.7',
    'builddir': 'fedora24-py2.7',
    'slavenames': fedora24_slaves,
    'factory': TwistedToxBuildFactory(
        git_update, toxEnv="py27-alldeps-nocov-posix",
        reactors=["select", "poll", "epoll"]),
    'category': 'supported'})

builders.append({
    'name': 'fedora24-py2.7-coverage',
    'builddir': 'fedora24-py2.7-coverage',
    'slavenames': fedora24_slaves,
    'factory': TwistedToxCoverageBuildFactory(
        git_update, toxEnv="py27-alldeps-withcov-posix",
        buildID='fedora24py2.7'),
    'category': 'supported'})

builders.append({
    'name': 'fedora24-py3.5',
    'builddir': 'fedora24-python-3.5',
    'slavenames': fedora24_slaves,
    'factory': TwistedToxBuildFactory(
        git_update, toxEnv="py35-alldeps-nocov-posix",
        reactors=["select", "poll", "epoll", "asyncio"]),
    'category': 'supported'})

builders.append({
    'name': 'fedora24-py3.5-coverage',
    'builddir': 'fedora24-py3.5-coverage',
    'slavenames': fedora24_slaves,
    'factory': TwistedToxCoverageBuildFactory(
        git_update, toxEnv="py35-alldeps-withcov-posix",
        buildID="fedora24py3.5"),
    'category': 'supported'})



#
# Fedora 25
#
builders.append({
    'name': 'fedora25-py2.7',
    'builddir': 'fedora25-py2.7',
    'slavenames': fedora25_slaves,
    'factory': TwistedToxBuildFactory(
        git_update, toxEnv="py27-alldeps-nocov-posix",
        reactors=["select", "poll", "epoll"]),
    'category': 'supported'})

builders.append({
    'name': 'fedora25-py2.7-coverage',
    'builddir': 'fedora25-py2.7-coverage',
    'slavenames': fedora25_slaves,
    'factory': TwistedToxCoverageBuildFactory(
        git_update, toxEnv="py27-alldeps-withcov-posix",
        buildID='fedora25py2.7'),
    'category': 'supported'})

builders.append({
    'name': 'fedora25-py3.5',
    'builddir': 'fedora25-python-3.5',
    'slavenames': fedora25_slaves,
    'factory': TwistedToxBuildFactory(
        git_update, toxEnv="py35-alldeps-nocov-posix",
        reactors=["select", "poll", "epoll", "asyncio"]),
    'category': 'supported'})

builders.append({
    'name': 'fedora25-py3.5-coverage',
    'builddir': 'fedora25-py3.5-coverage',
    'slavenames': fedora25_slaves,
    'factory': TwistedToxCoverageBuildFactory(
        git_update, toxEnv="py35-alldeps-withcov-posix",
        buildID="fedora25py3.5"),
    'category': 'supported'})


#
# RHEL 7
#
builders.append({
    'name': 'rhel7-py2.7',
    'builddir': 'rhel7-py2.7',
    'slavenames': rhel7_slaves,
    'factory': TwistedToxBuildFactory(
        git_update, toxEnv="py27-alldeps-nocov-posix",
        reactors=["select", "poll", "epoll"]),
    'category': 'supported'})

builders.append({
    'name': 'rhel7-py2.7-coverage',
    'builddir': 'rhel7-py2.7-coverage',
    'slavenames': rhel7_slaves,
    'factory': TwistedToxCoverageBuildFactory(
        git_update, toxEnv="py27-alldeps-withcov-posix",
        buildID='rhel7py2.7'),
    'category': 'supported'})


#
# OS X 10.10
#
builders.append({
    'slavenames': ['egh-osx-1'],
    'locks': [twoCPULock.access('counting')],
    'name': 'osx10.10-py2.7',
    'builddir': 'osx10.10-py2.7',
    'factory': TwistedToxBuildFactory(
        git_update, toxEnv="py27-alldeps-nocov-posix",
        reactors=["select"]),
    'category': 'supported'})


builders.append({
    'slavenames': ['egh-osx-1'],
    'locks': [twoCPULock.access('counting')],
    'name': 'osx10.10-py2.7-coverage',
    'builddir': 'osx10.10-py2.7-coverage',
    'factory': TwistedToxCoverageBuildFactory(
        git_update, toxEnv="py27-alldeps-withcov-posix",
        buildID='osx1010py2.7'),
    'category': 'supported'})


builders.append({
    'slavenames': ['egh-osx-1'],
    'locks': [twoCPULock.access('counting')],
    'name': 'osx10.10-py2.7-kqueue',
    'builddir': 'osx10.10-py2.7-kqueue',
    'factory': TwistedToxBuildFactory(
        git_update, toxEnv="py27-alldeps-nocov-posix",
        reactors=["kqueue"]),
    'category': 'unsupported'})


if 'vagrant-testing' in private.bot_info.keys():
    # When we are running in testing mode, add the testing
    # slave to all builders.
    for builder in builders:
        builder['slavenames'] = builder['slavenames'] + ['vagrant-testing']

c['builders'] = builders


def fileIsImportant(change):
    """
    Ignore branches which are changing the fun documetation.

    It is expected that fun changes will not be committed together with other
    changes.
    """
    for filename in change.files:
        if not filename.startswith("docs/fun/"):
            return 1
    return 0


# Now set up the schedulers. We do this after setting up c['builders']
# so we can auto-generate the correct configuration from the builder
# definitions.
c['schedulers'] = [

    # Trunk only branch scheduler.
    SingleBranchScheduler(
        name="all",
        change_filter=filter.ChangeFilter(branch='trunk'),
        builderNames=[
            b['name'] for b in builders if b['category'] in ('supported', 'unsupported')],
        fileIsImportant=fileIsImportant,
        # The build is triggered almost right away, but there is a small
        # delay to allow merging the changes.
        # When a merge is done, we receive notifications for the merge commit
        # for also for each commit which was merged.
        treeStableTimer=5,
        ),

    # Any non-trunk branch triggering only the supported builders.
    AnyBranchScheduler(
        name="branch-supported",
        change_filter=filter.ChangeFilter(
            branch_fn=lambda name: name != 'trunk'),
        builderNames=[
            b['name'] for b in builders if b['category'] == 'supported'],
        fileIsImportant=fileIsImportant,
        # As for trunk, we wait a bit so that we can aggregate multiple
        # commits and only run the latest commit.
        treeStableTimer=5,
        ),

    # Run the benchmark test suite every day.
    Nightly(
        name="Benchmarks",
        builderNames=[
            b['name'] for b in builders if b['category'] == 'benchmark'],
        hour=6, minute=3, branch='trunk', onlyIfChanged=True,
        ),

    forcesched.ForceScheduler(
        name='force-supported',
        repository=forcesched.FixedParameter(name='repository', default=''),
        branch=forcesched.StringParameter(name='branch', default=''),
        project=forcesched.FixedParameter(name="project", default=""),
        properties=[forcesched.StringParameter(name='test-case-name', label="test case", default='twisted')],
        builderNames=[ b['name'] for b in builders if b['category'] == 'supported'],
        ),

    forcesched.ForceScheduler(
        name='force-unsupported',
        repository=forcesched.FixedParameter(name='repository', default=''),
        branch=forcesched.StringParameter(name='branch', default=''),
        project=forcesched.FixedParameter(name="project", default=""),
        properties=[forcesched.StringParameter(name='test-case-name', label="test case", default='twisted')],
        builderNames=[ b['name'] for b in builders if b['category'] == 'unsupported'],
        ),

    forcesched.ForceScheduler(
        name='force-benchmark',
        repository=forcesched.FixedParameter(name='repository', default=''),
        branch=forcesched.StringParameter(name='branch', default=''),
        project=forcesched.FixedParameter(name="project", default=""),
        properties=[forcesched.StringParameter(name='test-case-name', label="test case", default='twisted')],
        builderNames=[ b['name'] for b in builders if b['category'] == 'benchmark'],
        ),
    ]

# configure other status things

c['slavePortnum'] = 9987
c['status'] = []

if hasattr(private, "irc_password"):
    c['status'].append(words.IRC(host="irc.freenode.net",
                                 nick='buildbot',
                                 password=private.irc_password,
                                 channels=["twisted-dev"]))


from twisted.python.util import sibpath
import jinja2
users = [ ('twisted', 'matrix') ]
authz = Authz(
    auth=BasicAuth(users),
    default_action='auth',
    gracefulShutdown=False,
    cleanShutdown=False,
    showUsersPage=False,
    )
status = TwistedWebStatus(
    authz=authz,
    public_html=sibpath(__file__, 'public_html'),
    change_hook_dialects={
        # Will create a resource available at BUILDBOT_URL/change_hook/github
        'github': {
            'secret': private.github_hook_secret,
            'strict': private.github_hook_strict,
            'class': TwistedGitHubEventHandler,
            },
        },
    jinja_loaders=[jinja2.FileSystemLoader(sibpath(__file__, 'templates'))],
    **private.webOptions)
c['status'].append(status)
del status

c['debugPassword'] = private.debugPassword

m = mail.MailNotifier(fromaddr="buildbot@twistedmatrix.com",
                      builders=["quick", "debian-py2.3-select"],
                      sendToInterestedUsers=True,
                      extraRecipients=["warner@lothar.com"],
                      mode="problem",
                     )
c['status'].append(m)

c['status'].append(GitHubStatus(
    token=private.github_status_token,
    repoOwner='twisted',
    repoName='twisted',
    # When build are manually triggered from the builder page and only the
    # branch is specified, `revision` is empty so we are looking at
    # `got_revision`.
    sha=Interpolate("%(prop:got_revision)s"),
    startDescription='Buildbot test started.',
    endDescription='Buildbot test done.',
    ))


c['projectName'] = "Twisted"
c['projectURL'] = "http://twistedmatrix.com/"
c['buildbotURL'] = "http://buildbot.twistedmatrix.com/"

c['buildCacheSize'] = 500
c['mergeRequests'] = lambda builder, req1, req2: False

# vim: filetype=python sw=4 expandtab

# Cleanup old builds.
c['buildHorizon'] = 1000
